<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mattes Groeger]]></title>
  <link href="http://MattesGroeger.github.io/atom.xml" rel="self"/>
  <link href="http://MattesGroeger.github.io/"/>
  <updated>2013-11-13T00:11:56+01:00</updated>
  <id>http://MattesGroeger.github.io/</id>
  <author>
    <name><![CDATA[Mattes Groeger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Strong Typed Constants]]></title>
    <link href="http://MattesGroeger.github.io/blog/2011/01/02/strong-typed-constants/"/>
    <updated>2011-01-02T19:19:00+01:00</updated>
    <id>http://MattesGroeger.github.io/blog/2011/01/02/strong-typed-constants</id>
    <content type="html"><![CDATA[<p>Constants are commonly occurring in the ActionScript core classes. Typical examples are events (<code>Event.COMPLETE</code>) or general configurations (<code>StageAlign.TOP_LEFT</code>). These constants are typically of type <code>String</code> and grouped in one class.</p>

<!-- more -->


<p>If you want to set the <code>align</code> property of the <code>Stage</code> for example you have to know where to look up the different possible constants. This can be done by looking up the documentation or by guessing the potential class name (<code>StageAlign</code>). IDEs like <a href="http://fdt.powerflasher.com">FDT</a> provide support for these constants by suggesting them in the auto completion.</p>

<p>However, the programmer is never enforced to use the existing constants and can assign any other string. This is error prone because the string is eventually misspelled. It is also annoying if you have to look up the documentation because your IDE doesn&rsquo;t suggest them. If you use your own constants in an application or library then you are completely on your own.</p>

<p>Other programming languages like Java provide a special syntax for this problem: <code>enum</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Direction</span> <span class="o">{</span><span class="n">LEFT</span><span class="o">,</span> <span class="n">RIGHT</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This enumerations can then be used strong typed in code. For example a function can define this as type in the signature. Assigning something else than one of the predefined constants (<code>LEFT</code> or <code>RIGHT</code>) would cause a compiler error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyDirection</span><span class="o">(</span><span class="n">Direction</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// use the enum here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ActionScript language itself has no support for enumerations. But there is a solution: Instead of using constants of type <code>String</code> just use the type of the constants class itself.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">Direction</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">LEFT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">RIGHT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A function can then look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">applyDirection</span><span class="o">(</span><span class="n">direction</span><span class="o">:</span><span class="kt">Direction</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">direction</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Direction</span><span class="o">.</span><span class="na">LEFT</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// use direction here...</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Direction</span><span class="o">.</span><span class="na">RIGHT</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// use direction here...</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="kt">IllegalOperationError</span><span class="o">(</span><span class="s2">&quot;Unsupported direction &quot;</span> <span class="o">+</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">applyDirection</span><span class="o">(</span><span class="n">Direction</span><span class="o">.</span><span class="na">LEFT</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You would still be able to create new instances of <code>Direction</code> and assign them. But the implementation of <code>applyDirection()</code> relies on the predefined constants. An error would be thrown if another instance would be assigned. Furthermore the user can see the different possible constants because he knows which specific type is required.</p>

<p>If you want to trace the <code>Direction</code> or if you want to store more information this is no problem, too:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">Direction</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">LEFT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="s2">&quot;left&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">RIGHT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="s2">&quot;right&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">var</span> <span class="n">direction</span><span class="p">:</span><span class="kt">String</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">Direction</span><span class="o">(</span><span class="n">direction</span><span class="o">:</span><span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">toString</span><span class="o">():</span><span class="kt">String</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right now, this approach is the only way to provide type save enumerations in ActionScript. You should always use them if you write third party libraries. Also in projects with multiple developers this makes sense.</p>

<p><em>Update 2011/03/13:</em> In order to to restrict the enum to the predefined constants you could combine the declaration with a singleton enforcing approach. Just expect an instance of a nested class in the constructor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">package</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="n">Direction</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">LEFT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="k">new</span> <span class="kt">EnumEnforcer</span><span class="o">(),</span> <span class="s2">&quot;left&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">RIGHT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="k">new</span> <span class="kt">EnumEnforcer</span><span class="o">(),</span> <span class="s2">&quot;right&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">var</span> <span class="n">direction</span><span class="p">:</span><span class="kt">String</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">Direction</span><span class="o">(</span><span class="n">enumEnforcer</span><span class="o">:</span><span class="kt">EnumEnforcer</span><span class="o">,</span> <span class="n">direction</span><span class="o">:</span><span class="kt">String</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">toString</span><span class="o">():</span><span class="kt">String</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="n">EnumEnforcer</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course this is still not 100% save because you could just pass in <code>null</code>. In this case an error could be thrown. But this would happen at runtime only then.</p>

<p>Thanks to <em>Thijs</em> for pointing out this problem in the comments and <em>Peter Höche</em> for suggesting this solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Logging with Trazzle]]></title>
    <link href="http://MattesGroeger.github.io/blog/2010/11/14/review-logging-with-trazzle/"/>
    <updated>2010-11-14T17:39:00+01:00</updated>
    <id>http://MattesGroeger.github.io/blog/2010/11/14/review-logging-with-trazzle</id>
    <content type="html"><![CDATA[<p>A few weeks ago <a href="https://twitter.com/MattesGroeger/status/24742440693">I discovered</a> an ActionScript 3.0 Logger called Trazzle. It&rsquo;s available for Mac only and provides a well-arranged, beautiful logging output, a performance monitor, bitmap logging <a href="http://www.nesium.com/products/trazzle">and much more</a>. In order to use this logger, you need to install the <a href="http">Logger Client</a> and include the <a href="http://github.com/nesium/trazzlelib-as3/downloads">SWC files</a> within your project.</p>

<!-- more -->


<p><img src="http://MattesGroeger.github.io/images/posts/trazzle.jpg" title="Trazzle" ></p>

<p>All source files are <a href="http://github.com/nesium/trazzlelib-as3">available on GitHub</a> as well as a <a href="http://github.com/nesium/trazzle-demo-app">simple example</a>.</p>

<h2>Usage</h2>

<p>I assume the author tried to build a logger that is very easy to use. Therefor he provides package level functions which allow fast access to the core features. The logger classes behind can also be used. But this should not be part of this post.</p>

<p>The first step is to initialize to logging framework:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">zz_init</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s2">&quot;Logger app title&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note:</em> The logging only works if you import the class <code>TrazzleLogger</code>. The reason why the demo application works: the <code>StatusBar</code> class holds a reference to <code>TrazzleLogger</code>. But normal logging will retrieve the reference only dynamically at runtime, so you have to take care of importing it on your own.</p>

<p>After initialization you can trigger the log messages. By default they will be displayed as plain white text. To make use of the different log levels you have to prepend one of the following characters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;normal&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;d debug&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;i info&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;n notice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;w warning&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;e error&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;c critical&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;f fatal&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This syntax is one of the main differences to other logging frameworks. Because of this convention it es very fast to use. You don&rsquo;t have to retrieve a logger instance and define a strong typed log level. Unfortunately the drawback is, you have to know the convention and you are responsible to use it correctly as there is no compile time check.</p>

<p>You can also use the classical <code>printf</code> behavior which allows to define a string with placeholders that will be replaced at runtime. Again, in order to use this feature you have to make sure that the method printf is compiled into the application.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">logf</span><span class="o">(</span><span class="s2">&quot;There is a difference between %s and %s&quot;</span><span class="o">,</span> <span class="s2">&quot;good&quot;</span><span class="o">,</span> <span class="s2">&quot;evil&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Furthermore with the function <code>zz_inspect(object)</code> you should be able to see all the fields and values of an instance. For some reason I didn&rsquo;t get it to work. Please comment below if you found a solution.</p>

<h2>Filtering</h2>

<p>In contrast to other logging frameworks it is not possible to configure the logging visibility for certain packages and log levels from within the flash client. Instead the configuration will completely take place in the Trazzle application by using the filters window. Here you can define and combine different rules. Excluding specific packages is not possible. You can save each filter set for later usage.</p>

<p><img src="http://MattesGroeger.github.io/images/posts/trazzleFilters.png" title="Trazzle Filters" ></p>

<h2>Performance Monitor</h2>

<p>The performance monitor gives you a chronological sequence of the memory consumption and the frames per second (fps). It worked for me but I have not really tested it.</p>

<h2>Conclusion</h2>

<p>Using the trazzle logging framework will force you to use the Trazzle application which is available for OS X only. So if you work in larger teams you have to take into consideration that you can not exchange the logging appender easily.</p>

<p>What I think is a bit strange, is that you have to manually import the TrazzleLogger in order to use it via the package level functions. This makes it difficult to enable/disable the logging on different environments like on debug and release stages. Reading traces is also very exhausting because you have to read small grey text on a black background. And if you copy the text into another editor it is broken by the line numbers. The other log messages are better readable (see first image).</p>

<p>Apart from this cons you get an easy to use logger which has useful additional features like bitmap data output. With this feature I was able to easily find a bitmap that accidentally prevented clicks. What I especially like is the StackTrace which you can see for each log entry. Because the logger is very easy and fast to use you can eventually use him for some special cases only.</p>

<p>One final note: To see the line numbers you have to compile with the compiler flag <code>-verbose-stacktraces</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short-Lived Commands with Parsley]]></title>
    <link href="http://MattesGroeger.github.io/blog/2010/10/31/short-lived-commands-with-parsley/"/>
    <updated>2010-10-31T21:24:00+01:00</updated>
    <id>http://MattesGroeger.github.io/blog/2010/10/31/short-lived-commands-with-parsley</id>
    <content type="html"><![CDATA[<p>This week we had to decide on a <a href="http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller">MVC Framework</a> for our next game at <a href="http://www.wooga.com">Wooga</a>. In the end the options were <a href="http://www.robotlegs.org/">Robotlegs</a> and <a href="http://www.spicefactory.org/parsley/">Parsley</a>. Both of them had advantages and disadvantages. One aspect we came across was the support of <code>Short-lived Command Objects</code>.</p>

<!-- more -->


<p>These commands hold no state and will be garbage collected after execution. In Robotlegs they are supported via the <a href="http://api.robotlegs.org/org/robotlegs/core/ICommandMap.html"><code>ICommandMap</code></a> interface. Parsley also provides an implementation of this pattern called <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/messaging.php#command_objects"><code>DynamicCommand</code></a>. In contrast to Robotlegs, Parsley provides 4 different ways to build and configure a context:</p>

<ul>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#mxml">MXML</a>: DynamicCommand Tag. Only for Flex projects.</li>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#xml">XML</a>: DynamicCommand Node. No compiler check on types possible.</li>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#as3">ActionScript</a>: No way to configure dynamic Commands.</li>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#dsl">Configuration DSL</a>: Programmatic configuration of Dynamic Commands.</li>
</ul>


<p>Because our game should not use the Flex framework, the last option is our only choice if we want to have strongly typed command mappings like in Robotlegs.</p>

<h2>DynamicCommands via Configuration DSL</h2>

<p>Because a documentation is not available for this case it was a bit tricky to find the solution (thanks for the hint, Jens). This was the first result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">var</span> <span class="n">contextBuilder</span><span class="p">:</span><span class="kt">ContextBuilder</span> <span class="o">=</span> <span class="n">ContextBuilder</span><span class="o">.</span><span class="na">newSetup</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">viewRoot</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">targetDef</span><span class="p">:</span><span class="kt">DynamicObjectDefinition</span> <span class="o">=</span> <span class="n">contextBuilder</span>
</span><span class='line'>  <span class="o">.</span><span class="na">objectDefinition</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">CommandType</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">asDynamicObject</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">DynamicCommandBuilder</span>
</span><span class='line'>  <span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="n">targetDef</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">builder</span>
</span><span class='line'>  <span class="o">.</span><span class="na">messageType</span><span class="o">(</span><span class="n">MessageType</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">stateful</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">config</span><span class="o">(</span><span class="n">ActionScriptConfig</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">MainConfig</span><span class="o">));</span>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can not use the <code>ActionScriptContexBuilder.build()</code> notation anymore. Instead you have to configure the whole context via the DSL. In line 18, the actual configuration (<code>MainConfig</code>) which contains all object definitions is passed in.</p>

<p>Because this configuration is very hard to read and redundant if you want to map several Commands, I encapsulated the mapping to a separate class <code>CommandMap</code>. Now the configuration looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">var</span> <span class="n">contextBuilder</span><span class="p">:</span><span class="kt">ContextBuilder</span> <span class="o">=</span> <span class="n">ContextBuilder</span><span class="o">.</span><span class="na">newSetup</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">viewRoot</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">commandMap</span><span class="p">:</span><span class="kt">CommandMap</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CommandMap</span><span class="o">(</span><span class="n">contextBuilder</span><span class="o">);</span>
</span><span class='line'><span class="n">commandMap</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">LoginCommand</span><span class="o">,</span> <span class="n">LoginRequest</span><span class="o">);</span>
</span><span class='line'><span class="n">commandMap</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">LogoutCommand</span><span class="o">,</span> <span class="n">LogoutRequest</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">config</span><span class="o">(</span><span class="n">ActionScriptConfig</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">MainConfig</span><span class="o">));</span>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Until now I found no way to map or un-map Commands after the context has been built. The only way would be to destroy the context they are registered in.</p>

<p>To get a better impression how short-lived commands are used in Parsley, I implemented a small example, which you can <a href="http://github.com/MattesGroeger/as3-parsley-example">access on GitHub</a>. The CommandMap class can be <a href="http://github.com/MattesGroeger/as3-parsley-example/blob/master/src/de/mattesgroeger/parsley/core/CommandMap.as">found here</a>.</p>

<p>And this is how the login example looks like. Invalid credentials lead to an error pop up. Valid login works with <em>admin</em> and password <em>test</em>:</p>

<object style="width: 850px; height: 250px;" width="850" height="250" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="/images/posts/ParsleyExample1.swf" /><embed style="width: 850px; height: 250px;" width="850" height="250" type="application/x-shockwave-flash" src="http://MattesGroeger.github.io/images/posts/ParsleyExample1.swf" /> </object>


<h2>Summary</h2>

<p>The Robotlegs implementation is very straight forward. Commands can be mapped and un-mapped at any time. This is not possible in Parsley. But you have other features that give maybe similar results (for example <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/messaging.php#interceptors" target="_blank">MessageInterceptors</a>).</p>

<p>Because Parsley reflects on the types you can pass data directly to the execute method. This way, each concrete execute method can receive strong typed parameters (see line 9). No framework class has to be extended for custom Commands. This is how a command can look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">LogoutCommand</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="o">[</span><span class="n">Inject</span><span class="o">]</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">var</span> <span class="n">service</span><span class="p">:</span><span class="kt">ISessionService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="n">MessageDispatcher</span><span class="o">]</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">var</span> <span class="n">dispatcher</span><span class="p">:</span><span class="kt">Function</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">execute</span><span class="o">(</span><span class="n">message</span><span class="o">:</span><span class="kt">LogoutRequest</span><span class="o">)</span> <span class="o">:</span> <span class="kt">ServiceRequest</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">logout</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">sessionId</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">result</span><span class="o">(</span><span class="n">success</span><span class="o">:</span><span class="kt">Boolean</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">dispatcher</span><span class="o">(</span><span class="k">new</span> <span class="kt">LogoutSuccess</span><span class="o">(</span><span class="n">success</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also like the native support of synchronous and asynchronous Commands in Parsley. No special configuration is necessary, because Parsley reflects on the return type of the <code>execute()</code> method (line 9, <code>ServiceRequest</code>).</p>

<h2>Links:</h2>

<ul>
<li><a href="http://github.com/MattesGroeger/as3-parsley-example">Browse the example sources on GitHub</a></li>
<li><a href="http://github.com/MattesGroeger/as3-parsley-example/blob/master/README.md">Readme of the example</a></li>
<li><a href="http://github.com/MattesGroeger/as3-parsley-example/blob/master/src/de/mattesgroeger/parsley/core/CommandMap.as">CommandMap source</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Icon Badge for Windows]]></title>
    <link href="http://MattesGroeger.github.io/blog/2010/03/14/icon-badge-for-windows/"/>
    <updated>2010-03-14T22:54:00+01:00</updated>
    <id>http://MattesGroeger.github.io/blog/2010/03/14/icon-badge-for-windows</id>
    <content type="html"><![CDATA[<p>Until now the <a href="http://MattesGroeger.github.io/blog/2010/02/08/icon-badge-library-for-air/">Air Icon Badge library</a> implementation only supported OS X dock icons. Nevertheless it is easy to extend the implementation for utilizing it as Windows system tray icon. In this article I will demonstrate how this could be realized.</p>

<!-- more -->


<p><img class="center" src="http://MattesGroeger.github.io/images/posts/WindowsSystemTray.jpg"></p>

<h2>Demo</h2>

<p>I extended the existing example implementation. Just choose &ldquo;Window Tray Icon&rdquo; from the right panel for previewing the new icon.</p>

<object style="width: 850px; height: 350px;" width="850" height="350" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="/images/posts/WebBadgeExample.swf" /><embed style="width: 850px; height: 350px;" width="850" height="350" type="application/x-shockwave-flash" src="http://MattesGroeger.github.io/images/posts/WebBadgeExample.swf" /></object>


<p></br></p>

<h2>Implementation</h2>

<p>The first class that I create is the <code>SystemTrayIconBuilder</code> (it must implement <code>IconBuilder</code> interface). This class is responsible for composing the system tray icon. It also sets the general icon size to 16 by 16 pixels.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">SystemTrayIconBuilder</span> <span class="kd">extends</span> <span class="n">AbstractIconBuilder</span> <span class="kd">implements</span> <span class="n">IconBuilder</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">createNewIcon</span><span class="o">(</span><span class="n">width</span> <span class="o">:</span> <span class="kt">int</span><span class="o">,</span> <span class="n">height</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">createNewIcon</span><span class="o">(</span><span class="mi">16</span><span class="o">,</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">addBackground</span><span class="o">(</span> <span class="n">background</span> <span class="o">:</span> <span class="kt">Bitmap</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">background</span><span class="o">.</span><span class="na">width</span> <span class="o">=</span> <span class="n">background</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">container</span><span class="o">.</span><span class="na">addChild</span><span class="o">(</span><span class="n">background</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">addBadge</span><span class="o">(</span><span class="n">label</span> <span class="o">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="n">badge</span> <span class="p">:</span> <span class="kt">TrayIconBadge</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">TrayIconBadge</span><span class="o">();</span>
</span><span class='line'>    <span class="n">badge</span><span class="o">.</span><span class="na">label</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">label</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">container</span><span class="o">.</span><span class="na">addChild</span><span class="o">(</span><span class="n">badge</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note the the <code>TrayIconBadge</code> class used in this example (line 17) is a MovieClip designed and exported (swc) with the Flash IDE. I used a pixel font for better readability. Because of the small icon size the visible letter count is also limited.</p>

<p>The next step is to create a custom <code>SystemTrayIconBadge</code> which has to implement the <code>IconBadge</code> interface. To avoid redundancies I extend the <code>DockIconBadge</code> class and override the factory method &ldquo;<code>createIconBuilder()</code>&rdquo;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">SystemTrayIconBadge</span> <span class="kd">extends</span> <span class="n">DockIconBadge</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">createIconBuilder</span><span class="o">()</span> <span class="o">:</span> <span class="kt">IconBuilder</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="kt">SystemTrayIconBuilder</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last step is to build the <code>CrossPlatformIconBadgeFactory</code> which implements <code>IconBadgeFactory</code>. It is responsible for detecting the users operating system and returning the corresponding <code>IconBadge</code>. Again I extend the existing factory class to avoid redundancies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">CrossPlatformIconBadgeFactory</span> <span class="kd">extends</span>
</span><span class='line'><span class="n">AirIconBadgeFactroy</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">create</span><span class="o">()</span> <span class="o">:</span> <span class="kt">IconBadge</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">NativeApplication</span><span class="o">.</span><span class="na">supportsSystemTrayIcon</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="kt">SystemTrayIconBadge</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally for using the new factory it has to be assigned to the <code>AirIconBadge</code> class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CrossPlatformIconBadgeFactory</span><span class="o">();</span>
</span><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">label</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>As you can see, it is very little effort to add the windows system tray icon capability. You are free to (re)use this example. <a href="http://code.google.com/p/air-icon-badge/downloads/list">Binaries</a> and <a href="http://code.google.com/p/air-icon-badge/source/browse/#svn/air-icon-badge-examples/trunk/dev/src/de/mgroeger/air/icon/example/windows">sources</a> can be downloaded from the <a href="http://code.google.com/p/air-icon-badge/">google code project site</a>.</p>

<ul>
<li><a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-examples.zip&amp;amp;can=2&amp;amp;q=#makechanges">Example Download</a> (air/swf)</li>
<li><a href="http://code.google.com/p/air-icon-badge/source/browse/#svn/air-icon-badge-examples/trunk/dev/src/">Browse Example Sources</a></li>
<li><a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-0.1.zip">Library Download</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Icon Badge Library for Air]]></title>
    <link href="http://MattesGroeger.github.io/blog/2010/02/08/icon-badge-library-for-air/"/>
    <updated>2010-02-08T14:06:00+01:00</updated>
    <id>http://MattesGroeger.github.io/blog/2010/02/08/icon-badge-library-for-air</id>
    <content type="html"><![CDATA[<p><a href="http://www.adobe.com/products/air/">Adobe Air</a> is often used to build feed readers or social media clients. This kind of applications can retrieve new data while they are running in the background. In that case it would be great to inform the user about the amount of new items.</p>

<!-- more -->


<p><img class="right" src="http://MattesGroeger.github.io/images/posts/mail.png"></p>

<p>With OS X you can use the dock icon for that purpose. The Cocoa Framework allows to display a user defined text consistently on top of the application dock tile (icon). E.g. the screenshot at the right shows 2 unread mails in the inbox.</p>

<p><img class="left" src="http://MattesGroeger.github.io/images/posts/comparision.png" title="Native and emulated badge" ></p>

<p>Unfortunately the Air runtime allows no access to this native functionality. Thats why the idea for this library came up. It tries to emulate the native badge with the possibilities Air provides (see left image). Until now only the OS X badge is supported but a Windows implementation is possible, too. I will demonstrate the extensibility in one of the following blog posts.</p>

<h2>Usage</h2>

<p>To show the badge label you can use the static facade <code>AirIconBadge</code>. Internally it will create an <code>IconBadge</code> appropriate for the current operating system. <strong>Note:</strong> only one implementation for OS X is provided until now! Windows or Linux users won&rsquo;t see a badge label.</p>

<p>With the static property <code>label</code> you can assign any string that should be displayed. Thats it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">label</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you assign an empty string or <code>null</code>, no badge will be displayed. To remove the current badge label you can also call the method <code>clearLabel()</code>.</p>

<p>By default the biggest icon defined within the <a href="http://livedocs.adobe.com/flex/3/html/help.html?content=File_formats_1.html">application descriptor</a> will be loaded and shown. If no icon has been defined or the path is incorrect you must assign a <code>customIcon</code> in order to see the label. You can also assign a <code>customIcon</code> if you want to replace the default icon temporarily. Removing the <code>customIcon</code> will show up the default icon again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">customIcon</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CustomIconBitmap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If neither of the icons could be loaded, no badge will be displayed. In this case an error event will be dispatched (<code>UpdateErrorEvent</code>). To get status information about the internals you can register for the InformationEvent. Both events will be dispatched by the <code>IconBadge</code> witch is statically stored within the AirIconBadge.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">customIcon</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CustomIconBitmap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">iconBadge</span> <span class="p">:</span> <span class="kt">IconBadge</span> <span class="o">=</span> <span class="n">AirIconBadge</span><span class="o">.</span><span class="na">iconBadge</span><span class="o">;</span>
</span><span class='line'><span class="n">iconBadge</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">UpdateErrorEvent</span><span class="o">.</span><span class="na">UPDATE_ERROR</span><span class="o">,</span> <span class="n">handleError</span><span class="o">);</span>
</span><span class='line'><span class="n">iconBadge</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">InformationEvent</span><span class="o">.</span><span class="na">INFORMATION</span><span class="o">,</span> <span class="n">handleInformation</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function </span><span class="nf">handleError</span><span class="o">(</span><span class="n">event</span> <span class="o">:</span> <span class="kt">UpdateErrorEvent</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">// do some error handling</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function </span><span class="nf">handleInformation</span><span class="o">(</span><span class="n">event</span> <span class="o">:</span> <span class="kt">InformationEvent</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nf">trace</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">information</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Download &amp; Demo</h2>

<p>All sources, binaries and examples are <a href="http://code.google.com/p/air-icon-badge/downloads/list">available for download</a> under the MIT license. If you have a Mac, you can <a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-examples.zip&amp;amp;can=2&amp;amp;q=#makechanges">download this Air application</a> where the badge shows up on the real application icon. Running this application on windows will have no visual effect.</p>

<p>None Mac users can use the following demo that shows a preview of the dock icon:</p>

<object style="width: 850px; height: 400px;" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="850" height="400" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="/images/posts/WebBadgeExample.swf" /><embed style="width: 850px; height: 400px;" type="application/x-shockwave-flash" width="850" height="400" src="http://MattesGroeger.github.io/images/posts/WebBadgeExample.swf"> </embed></object>


<p></br></p>

<h2>Whats next</h2>

<p>The documentation (especially the ASDocs) will be improved as well as the sources. If you have questions or feature requests, please let my know. The next blog posts will give you a deeper insight in the architecture and extensibility of this library.</p>
]]></content>
  </entry>
  
</feed>
