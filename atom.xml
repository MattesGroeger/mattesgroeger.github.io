<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mattes Groeger]]></title>
  <link href="http://blog.mattes-groeger.de/atom.xml" rel="self"/>
  <link href="http://blog.mattes-groeger.de/"/>
  <updated>2014-01-14T18:46:56+01:00</updated>
  <id>http://blog.mattes-groeger.de/</id>
  <author>
    <name><![CDATA[Mattes Groeger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim with System Clipboard]]></title>
    <link href="http://blog.mattes-groeger.de/vim-with-system-clipboard/"/>
    <updated>2013-11-15T16:14:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/vim-with-system-clipboard</id>
    <content type="html"><![CDATA[<p>With vim I got really addicted to keyboard-only usage. But there is one thing I was always missing: integration with the system clipboard. I had to switch back to the mouse for that. As I learned today system clipboard is supported by vim. Unfortunately the version packaged with OSX is not compiled with this feature enabled.</p>

<!-- more -->


<p>You can check this yourself by typing <code>vim --version</code> on the command line. The output should contain something like <code>+clipboard</code> (<code>+</code> means enabled). Probably you have a <code>-</code> instead. Luckily with <a href="http://brew.sh/">homebrew</a> you can easily install vim with clipboard enabled.</p>

<h3>1. Install Vim</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install vim</span></code></pre></td></tr></table></div></figure>


<p>This will install vim in the <code>/usr/local/bin</code> directory. So far the original vim is still in place and used. We have to give the brew version precedence.</p>

<h3>2. Update PATH Order</h3>

<p>An easy way to make sure the homebrew version is loaded is to make sure its path is defined before the system path. Locate your <code>PATH</code> configuration.</p>

<p>For <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)">bash</a> it&rsquo;s one of these files:</p>

<ul>
<li>~/.bash_profile</li>
<li>~/.bash_login</li>
<li>~/.profile</li>
</ul>


<p>For <a href="http://en.wikipedia.org/wiki/Z_shell">zsh</a> open this file:</p>

<ul>
<li>~/.zshrc</li>
</ul>


<p>Make sure <code>/usr/local/bin</code> is declared before <code>/usr/bin</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin...</span></code></pre></td></tr></table></div></figure>


<p>Reload the config, with zsh for example:
<a href="http://localhost:4000/blog/2013/11/15/vim-with-system-clipboard/">http://localhost:4000/blog/2013/11/15/vim-with-system-clipboard/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.zshrc
</span><span class='line'>which vim
</span><span class='line'>vim --version</span></code></pre></td></tr></table></div></figure>


<p>The vim path should be <code>/usr/local/bin/vim</code>. And <code>vim --version</code> should contain the <code>+clipboard</code>. A nice side effect of changing the PATH order is that you can also update git using homebrew.</p>

<h3>3. Enable Clipboard in .vimrc</h3>

<p>As a last step you have to enable the system clipboard in vim. Open your <code>.vimrc</code> and add the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set clipboard=unnamed</span></code></pre></td></tr></table></div></figure>


<p>From now on you should be able to use the system clipboard when using vim verbs (<code>y</code>, <code>d</code>, <code>p</code> etc).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kiwi - iOS Testing with Style]]></title>
    <link href="http://blog.mattes-groeger.de/kiwi-testing-with-style-for-ios/"/>
    <updated>2012-11-11T20:57:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/kiwi-testing-with-style-for-ios</id>
    <content type="html"><![CDATA[<p>I&rsquo;m very passionate about writing tests to ensure code quality and achieve better software design. When I started iOS development one of the first things I did was evaluating testing frameworks for iOS.</p>

<!-- more -->


<h3>How it started out&hellip;</h3>

<p>It didn&rsquo;t take long to setup <a href="https://github.com/gabriel/gh-unit">GHUnit</a>, <a href="http://ocmock.org/">OCMock</a> and <a href="https://github.com/hamcrest/OCHamcrest">OCHamcrest</a>. This combination allows unit testing, mocking and provides a better assertion syntax. I was very excited and <a href="https://twitter.com/#!/MattesGroeger/status/167993966342569987">tweeted about it</a>. On this tweet I got a very interesting reply from my friend <a href="https://twitter.com/#!/iceX33">Maxim</a>:</p>

<p><img class="center" src="http://blog.mattes-groeger.de/images/posts/TweetMax.png" title="Tweet from Max" ></p>

<p>This made me curios. I started using <a href="https://github.com/allending/Kiwi">Kiwi</a> for my recent iOS project and <a href="https://twitter.com/#!/MattesGroeger/status/176436609984643072">fell more and more in love with it</a>.</p>

<h3>Presentation</h3>

<p>In the following video I give a brief introduction to Kiwi and what makes it so special. It was captured during one of our <code>5-Minutes-of-Fame</code> talks at <a href="http://www.wooga.com/">Wooga</a>.</p>

<iframe width="853" height="480" src="http://blog.mattes-groeger.de//www.youtube.com/embed/gByruPzLjiA" frameborder="0" allowfullscreen></iframe>


<h2>Links</h2>

<ul>
<li><a href="https://github.com/allending/kiwi">Kiwi Testing Framework</a> (GitHub)</li>
<li><a href="https://github.com/MattesGroeger/OCUnit2JUnit">Parsing Kiwi output on Jenkins</a> (GitHub)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flash Timeline Actions]]></title>
    <link href="http://blog.mattes-groeger.de/flash-timeline-actions/"/>
    <updated>2012-01-29T17:12:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/flash-timeline-actions</id>
    <content type="html"><![CDATA[<p>A proper designer-developer workflow is essential, especially in bigger teams. By separating logic and view (e.g. via <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC Design Pattern</a>) we try to avoid dependencies between artists and programmers. Less coupling increases the speed of development and design.</p>

<!-- more -->


<p>Sometimes it is hard to avoid this coupling, especially if it comes to optimization. Let&rsquo;s imagine an artist who wants to have sound within his timeline animation. He could just embed the sound and put it in the appropriate timeline frame. But if he then wants to use the same sound in another FLA it gets complicated. We don&rsquo;t want the same sound to be loaded twice.</p>

<p>This post describes a pattern for triggering more sophisticated logic from the Flash timeline so artists can easily make use of it. For easier understanding I will stick to the sound example. But keep in mind that this pattern can be applied to other problems as well. I will give an example at the end of this post.</p>

<p>Please also note that this post focuses on timeline related actions. If you want to trigger sounds based on mouse clicks or just playing background sounds, you are perfectly fine doing this purely by code.</p>

<h3>Alternative Approaches</h3>

<p>Before discussing the actual solution in detail, I would like to briefly mention two alternatives and their particular drawbacks.</p>

<p>I already mentioned one solution: Embedding sounds within their respective <code>FLA</code> files. But using the same sound in other <code>FLAs</code> would cause it to be loaded multiple times. The browser can&rsquo;t cache them either because they are embedded in different <code>SWF</code> files.</p>

<p>Another solution would be to trigger sounds programmatically by using frame labels. This means that your code would have to observe the timeline for execution of certain labels. You have to use some kind of configuration that tells the code which sound to play on which MovieClip and label. Parsing every MovieClip wouldn&rsquo;t be a good idea in terms of performance.</p>

<p>Both alternatives have a drawback either for artists or programmers. Wouldn&rsquo;t it be cool if we could trigger our logic from the timeline instead of heaving the logic observing it? Thats where &lsquo;Timeline Actions&rsquo; enter the stage.</p>

<h2>Timeline Actions</h2>

<p>This illustration shows the relevant parts that I&rsquo;ll explain in the following sections.</p>

<p><img class="center" src="http://blog.mattes-groeger.de/images/posts/Graph.png" title="Timeline Actions Overview" ></p>

<h3>The basic concept</h3>

<p>In the above image you can see two example asset files (red) which will be maintained by the artists. The sound logic (blue) is a separate <code>SWF</code> or part of the application maintained by the programmers. It&rsquo;s responsible for loading, caching and playing the sounds. The goal is, that artists can trigger any sound by putting the following frame script into the timeline:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">playSound</span><span class="o">(</span><span class="s2">&quot;mySound&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note</em>: Because the <code>playSound()</code> is a top-level function it requires no import statement.</p>

<p>The sound logic should receive the string <code>"mySound"</code> and select the appropriate MP3 for playback. But how do you communicate from the assets (red) to the sound logic (blue)? It&rsquo;s not a good idea to compile the sound logic into each asset. Thats why the first step is, to put just the communication logic into a very small library called &ldquo;<code>timeline-sound.swc</code>&rdquo; (green).</p>

<p>This library contains the <code>playSound()</code> function as well as a static <code>SoundDelegate</code> class. The <code>SoundDelegate</code> is the connection between <code>playSound()</code> and sound logic. The next section &ldquo;Technical implementation&rdquo; will give you more insight into the <code>SWC</code> contents.</p>

<p><img class="center" src="http://blog.mattes-groeger.de/images/posts/ActionscriptSettings.png" title="Advanced ActionScript 3.0 Settings" ></p>

<p>You can reference the <code>timeline-sound.swc</code> in each <code>FLA</code> now. Therefore open your <code>FLA</code> and navigate to <code>File -&amp;gt; ActionScript Settings...</code> Here go to the second tab &ldquo;<code>Library path</code>&rdquo; and select the &ldquo;<code>Browse to SWC file</code>&rdquo; button (1). After choosing the <code>timeline-sound.swc</code> it shows up in the panel underneath (2). Now you can use the <code>playSound()</code> function as frame script without getting a compiler error. At the same time your sound logic keeps separate.</p>

<h3>Technical implementation</h3>

<p>This section will explain how top-level function, delegate and sound logic get wired together. Therefore lets see what the contents of the <code>timeline-sound.swc</code> are. You can <a href="https://github.com/MattesGroeger/as3-timeline-sound">browse and download the source code from GitHub</a> or just read on.</p>

<p><img class="center" src="http://blog.mattes-groeger.de/images/posts/TimelineSoundContents.png" title="Contents of &#39;timeline-sound.swc&#39;" ></p>

<p>The <code>SoundDelegate</code> contains only static methods. Therefore it can be reached from anywhere in the application (including the top-level function <code>playSound()</code>). It&rsquo;s implementation is rather simple. It basically just holds a reference to another instance that it delegates to (line 17). Again, for encapsulation reasons this is implemented as an interface <code>ISoundAdapter</code> (line 3).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">SoundDelegate</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">var</span> <span class="n">adapter</span><span class="p">:</span><span class="kt">ISoundAdapter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">function </span><span class="nf">init</span><span class="o">(</span><span class="n">adapter</span><span class="o">:</span><span class="kt">ISoundAdapter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">SoundDelegate</span><span class="o">.</span><span class="na">adapter</span> <span class="o">=</span> <span class="o">(</span><span class="n">adapter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">adapter</span> <span class="o">:</span> <span class="k">new</span> <span class="kt">NullSoundAdapter</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">function</span> <span class="kd">get</span> <span class="n">initialized</span><span class="o">():</span><span class="n">Boolean</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">adapter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">function </span><span class="nf">playSound</span><span class="o">(</span><span class="n">key</span><span class="o">:</span><span class="kt">String</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">adapter</span><span class="o">.</span><span class="na">playSound</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also see an <code>init()</code> function (line 5) which is used to set the proper <strong><code>ISoundAdapter</code></strong> implementation. The <code>ISoundAdapter</code> defines just one method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="n">ISoundAdapter</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">function </span><span class="nf">playSound</span><span class="o">(</span><span class="n">key</span><span class="o">:</span><span class="kt">String</span><span class="o">):</span><span class="kt">void</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In line 7 of the <code>SoundDelegate</code> listing you will also notice that a <code>NullSoundAdapter</code> is assigned in case no instance gets passed to this method. This null-implementation silently ignores every call to <code>playSound()</code>. And this is how the <strong><code>playSound()</code></strong> top-level function looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">playSound</span><span class="o">(</span><span class="n">title</span><span class="o">:</span><span class="kt">String</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">SoundDelegate</span><span class="o">.</span><span class="na">initialized</span><span class="o">)</span>
</span><span class='line'>    <span class="n">SoundDelegate</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">SoundDelegate</span><span class="o">.</span><span class="na">playSound</span><span class="o">(</span><span class="n">title</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function makes sure that the <code>SoundDelegate</code> class gets initialized. Because it will create the <code>NullSoundAdapter</code> by default, it is not very useful yet. Thats where the actual sound logic comes in. Whenever the logic is ready it calls the <code>SoundDelegate</code> and registers itself as <code>SoundAdapter</code> (line 6):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">SoundLogic</span> <span class="kd">implements</span> <span class="n">ISoundAdapter</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">SoundLogic</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Do this after sounds are loaded</span>
</span><span class='line'>    <span class="n">SoundDelegate</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">playSound</span><span class="o">(</span><span class="n">key</span><span class="o">:</span><span class="kt">String</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="c1">// play the sound for &#39;key&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>SoundLogic</code> class implements the <code>ISoundAdapter</code> interface. Now whenever someone calls <code>playSound("foo")</code> the method <code>SoundLogic.playSound()</code> will be called with the string &ldquo;<code>foo</code>&rdquo;. Here you can now put all the logic that is necessary to play the sound for string &ldquo;<code>foo</code>&rdquo;.</p>

<h3>Adding new sounds</h3>

<p>Well you could now argue that, with this solution, adding new sounds still requires programmatic effort. In <a href="http://apps.facebook.com/magicland/">Magic Land</a> (the game I worked on <a href="http://www.wooga.com/">at wooga</a>) we also found a proper solution for this. Before I can explain it you have to know that in our game the sound logic is encapsulated within a module (<code>SWF</code>). This module is loaded lazy because it is less important than other parts of the game. A user can already play our game while the sounds are still loading.</p>

<p>The idea is to embed all sounds that could be triggered from the timeline in a single <code>FLA</code>, so the artists can maintain it. Sounds have to be exported for ActionScript, where the linkage name matches the string that will be later used for the <code>playSound()</code> method parameter. In order to make the sounds available to the sound logic we chose to compile them into the sound module itself. This way we get good compression and have no additional loading effort. Note however that this approach wouldn&rsquo;t make sense for large sound files.</p>

<p><img class="center" src="http://blog.mattes-groeger.de/images/posts/SoundLibrary.png" title="sounds.fla" ></p>

<p>The question is now, how do we get new sounds automatically compiled into the sound module? What we did, we created a Sprite that contains all sounds. The <code>FLA</code> file then gets compiled into a <code>SWC</code> library and is part of the sound module classpath. To enforce the inclusion of the sound definitions the exported <code>SoundInclusionContainer</code> class is once referenced in the module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="c1">// Sound module constructor</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">SoundModule</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">SoundInclusionContainer</span><span class="o">;</span> <span class="c1">// sound embedding</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, whenever the sound module gets compiled, all linked sounds within the container will be made available for the <code>playSound()</code> method call. Now the complete flow of adding and using timeline sounds is independent of the programmers while providing an optimized sound loading experience.</p>

<h2>Conclusion</h2>

<p>This post showed how artists can easily link timeline animations to a more complex logic. As this post is more about the general idea I didn&rsquo;t explain how the sound logic itself looks like.</p>

<p>I found another use cases for this pattern in our game <a href="http://apps.facebook.com/magicland/">Magic Land</a>. We use it for displaying visual effects. Similar to sounds they are part of a separate module that is lazy loaded. On low performance computers we could disable the effects completely.</p>

<p>Finally, lets have a look on the pros and cons of this pattern.</p>

<h3>Disadvantages</h3>

<p>The artists won&rsquo;t be able to hear the sound wile testing their sole assets. They have to start the game including the sound logic in order to hear something. In <a href="http://apps.facebook.com/magicland/">Magic Land</a> the artists are able to build the game locally on their computer (probably a topic for another blog post). So they can hear how it feels in the actual game.</p>

<p>Another drawback is that each asset <code>FLA</code> that makes use of the timeline actions has to link the <code>timeline-sound.swc</code>, which adds 2 Kb. A solution would be to exclude the library for compiling and enforce it to compile in the main application. But then running the asset <code>SWF</code> outside the final application/game throws errors and timeline animations won&rsquo;t be visible anymore.</p>

<h3>Advantages</h3>

<p>On the positive side programmers get less distracted by sound issues because artists can do everything on their own. They are free to add the <code>playSound()</code> call in any asset file, as long as they link the <code>timeline-sound.swc</code> into the <code>FLA</code> file.</p>

<p>At the same time the sounds itself can be loaded after more important stuff has been done loading. This leads to a much better user experience. Also imagine a user turned off sounds. Now you can just not load the sounds at all and the <code>playSound()</code> call will be silently ignored (null-implementation of <code>ISoundAdapter</code>).</p>

<h3>Sources</h3>

<p>You can find all source files for the timeline-sound library in <a href="https://github.com/MattesGroeger/as3-timeline-sound">this GitHub repository</a>. If you have any questions feel free to comment below. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context-Aware Tasks]]></title>
    <link href="http://blog.mattes-groeger.de/context-aware-tasks/"/>
    <updated>2011-03-13T20:03:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/context-aware-tasks</id>
    <content type="html"><![CDATA[<p>This article shows a useful way on how to combine the <a href="http://www.spicefactory.org/parsley/download.php">Spicelib</a> <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/task.php#intro">Task Framework</a> with <a href="http://www.spicefactory.org/parsley/download.php">Parsley</a>. This way you can access everything from the context during the execution of a Task&hellip;</p>

<!-- more -->




<blockquote><p>The Task Framework is a general abstraction for asynchronous operations. It allows nesting / grouping of Tasks in TaskGroup instances for concurrent or sequential execution</p><footer><strong>Parsley Documentation</strong> <cite><a href='http://www.spicefactory.org/parsley/docs/3.3/manual/task.php#intro'>www.spicefactory.org/parsley/&hellip;</a></cite></footer></blockquote>


<p>One way to access the <code>Context</code> from within a <code>Task</code> would be to define it during the <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php" target="_blank">Parsley Configuration</a> (<code>Context</code>). But this would mean, that the <code>Task</code> will not be removed until the context gets destroyed. Because a <code>Task</code> is only active during a limited time, this doesn&rsquo;t make much sense.</p>

<p>Another approach would be, not to define the <code>Task</code> in the <code>Context</code> but passing in all the necessary dependencies within the constructor. Depending on the amount of required dependencies, the constructor can become quite big. Also <code>Parsley</code> features like <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/messaging.php#intro" target="_blank">Messaging</a> are not directly supported anymore.</p>

<h2>Solution</h2>

<p>That&rsquo;s why this solution utilizes the <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/lifecycle.php#dynamic" target="_blank">Dynamic Object</a> feature of Parsley. It allows to add any instance to the <code>Context</code> during runtime and also removing it again, if not required anymore. For a <code>Task</code> this means that it needs to be added before the <code>start()</code> is called, and removed after the <code>complete()</code> has been triggered.</p>

<p>This adding/removing happens through the <code>Context</code> interface of Parsley. It should happen automatically in the <code>Task</code> to reduce the amount of code to write. In order to not have to pass the <code>Context</code> to each <code>Task</code> it could just be set once in the parent <code>TaskGroup</code>. The child <code>Task</code> then accesses it via the <code>parent</code> getter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">SequentialContextTaskGroup</span> <span class="kd">extends</span> <span class="n">SequentialTaskGroup</span> <span class="kd">implements</span> <span class="n">IContextProvider</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">var</span> <span class="n">_context</span><span class="p">:</span><span class="kt">Context</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">SequentialContextTaskGroup</span><span class="o">(</span><span class="n">context</span><span class="o">:</span><span class="kt">Context</span><span class="o">,</span> <span class="n">name</span><span class="o">:</span><span class="kt">String</span> <span class="o">=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">_context</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function</span> <span class="kd">get</span> <span class="n">context</span><span class="o">():</span><span class="n">Context</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_context</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is how the <code>IContextProvider</code> interface looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="n">IContextProvider</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="kd">get</span> <span class="n">context</span><span class="o">():</span><span class="n">Context</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following <code>AbstractContextTask</code> is then responsible for adding itself to the <code>Context</code> as soon as it is started. It also removes itself as soon as the <code>complete()</code>, <code>cancel()</code> or <code>skip()</code> has been called. Furthermore it provides a <code>doStartContext()</code> method (read more in the next paragraph).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">AbstractContextTask</span> <span class="kd">extends</span> <span class="n">Task</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">var</span> <span class="n">_dynamicObject</span><span class="p">:</span><span class="kt">DynamicObject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">doStart</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">_dynamicObject</span> <span class="o">=</span> <span class="n">IContextProvider</span><span class="o">(</span><span class="n">parent</span><span class="o">).</span><span class="n">context</span><span class="o">.</span><span class="na">addDynamicObject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">doStartContext</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">doStart</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">function </span><span class="nf">doStartContext</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="cm">/* base implementation does nothing */</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">doCancel</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">cleanContext</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">doCancel</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">doSkip</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">cleanContext</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">doSkip</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">complete</span><span class="o">():</span><span class="kt">Boolean</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">cleanContext</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">complete</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">function </span><span class="nf">cleanContext</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">_dynamicObject</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following class is a concrete implementation of <code>AbstractContextTask</code>. That&rsquo;s why it gets the <code>HintComponent</code> injected (line 4). Please also note that this <code>Task</code> overrides the method <code>doStartContext()</code> (line 13). This way we ensure that the class already has been added to the <code>Context</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">ShowHintTask</span> <span class="kd">extends</span> <span class="n">AbstractContextTask</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="o">[</span><span class="n">Inject</span><span class="o">]</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">var</span> <span class="n">hint</span><span class="p">:</span><span class="kt">HintComponent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">var</span> <span class="n">type</span><span class="p">:</span><span class="kt">HintType</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">ShowHintTask</span><span class="o">(</span><span class="n">type</span><span class="o">:</span><span class="kt">HintType</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">doStartContext</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">hint</span><span class="o">.</span><span class="na">showHint</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">complete</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following code shows how everything can be glued together. Note, that you don&rsquo;t have to pass the <code>Context</code> to each task.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">TaskController</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="o">[</span><span class="n">Inject</span><span class="o">]</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">var</span> <span class="n">context</span><span class="p">:</span><span class="kt">Context</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="n">Init</span><span class="o">]</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">initialize</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="n">taskGroup</span><span class="p">:</span><span class="kt">SequentialContextTaskGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">SequentialContextTaskGroup</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">taskGroup</span><span class="o">.</span><span class="na">addTask</span><span class="o">(</span><span class="k">new</span> <span class="kt">ShowHintTask</span><span class="o">(</span><span class="n">HintType</span><span class="o">.</span><span class="na">ATTENTION</span><span class="o">));</span>
</span><span class='line'>    <span class="n">taskGroup</span><span class="o">.</span><span class="na">addTask</span><span class="o">(</span><span class="k">new</span> <span class="kt">PointToTask</span><span class="o">(</span><span class="k">new</span> <span class="kt">Point</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">)));</span>
</span><span class='line'>    <span class="c1">// add more tasks here...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">taskGroup</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>This approach of <code>Context</code>-aware <code>Tasks</code> ensures that you don&rsquo;t have a lot of <code>Tasks</code> at the same time in the <code>Context</code>. The adding and removing from the <code>Context</code> happens in an encapsulated class. The <code>Task</code> itself can directly access injected objects during execution time.</p>

<h2>Links</h2>

<ul>
<li><a href="http://mattesgroeger.github.io/blog/2011/01/02/strong-typed-constants/">Strong typed constants</a></li></li>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/task.php">Task framework documentation</a></li></li>
<li><a href="http://www.spicefactory.org/parsley/download.php">Parsley/Spicelib download</a></li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Label Validation with FlexUnit]]></title>
    <link href="http://blog.mattes-groeger.de/label-validation-with-flexunit/"/>
    <updated>2011-01-18T22:36:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/label-validation-with-flexunit</id>
    <content type="html"><![CDATA[<p>While working in interdisciplinary teams where graphics are produced by artists and the code comes from the developers, a solid designer-developer work-flow is crucial. At my current project team at <a href="http://www.wooga.com">Wooga</a> we already established a very good work-flow. The artists can produce graphics and see them in the running application after committing them.</p>

<!-- more -->


<h2>The Problem</h2>

<p>In our project we use <a href="http://www.richardleggett.co.uk/blog/index.php/2010/03/08/flash_builder_and_flash_pro_asset_workflows">SWC asset libraries</a> to have a compile time check and strong typed access to all our graphics. To add logic to <code>MovieClip</code> frames you could either put the code directly on the timeline or the artist defines labels which are then utilized from the code. In order to keep the view separated from the code you should always use the label approach. But this is also risky if the artist accidentally deletes or renames a label. The code would then behave unexpectedly without knowing it. The only way to see the problem is to start the application and test all the <code>MovieClip</code> logic.</p>

<h2>The First Approach</h2>

<p>To protect the labels from unintended changes, our first approach was to check their existence wherever we used them in code. This means we had to provide a separate <code>Vector</code> that contained all the expected labels.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">var</span> <span class="n">labels</span><span class="p">:</span><span class="kt">Vector.&lt;String&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Vector.&lt;String&gt;</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">var</span> <span class="n">view</span><span class="p">:</span><span class="kt">IconView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">IconMediator</span><span class="o">(</span><span class="n">view</span><span class="o">:</span><span class="kt">IconView</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">initializeLabels</span><span class="o">();</span>
</span><span class='line'>  <span class="n">assertLabelsExist</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">function </span><span class="nf">initializeLabels</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">labels</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="n">labels</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">IconState</span><span class="o">.</span><span class="na">ON</span><span class="o">,</span> <span class="n">IconState</span><span class="o">.</span><span class="na">OFF</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">function </span><span class="nf">assertLabelsExist</span><span class="o">(</span><span class="n">view</span><span class="o">:</span><span class="kt">ButtonRounded</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">requiredMatchesRemaining</span><span class="p">:</span><span class="kt">int</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="k">each</span> <span class="o">(</span><span class="kd">var</span> <span class="n">requiredLabel</span><span class="p">:</span><span class="kt">String</span> <span class="k">in</span> <span class="n">labels</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="k">each</span> <span class="o">(</span><span class="kd">var</span> <span class="n">label</span><span class="p">:</span><span class="kt">FrameLabel</span> <span class="k">in</span> <span class="n">view</span><span class="o">.</span><span class="na">currentLabels</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">requiredLabel</span> <span class="o">==</span> <span class="n">label</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>        <span class="n">requiredMatchesRemaining</span><span class="o">--;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">requiredMatchesRemaining</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="kt">IllegalArgumentError</span><span class="o">(</span><span class="s1">&#39;IconView requires all labels: &#39;</span> <span class="o">+</span> <span class="n">labels</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beside this we defined the labels itself in an <a href="http://mattesgroeger.github.io/blog/2011/01/02/strong-typed-constants/">enumeration class</a> to provide strong typed access.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">IconState</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">ON</span><span class="p">:</span><span class="kt">IconState</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">IconState</span><span class="o">(</span><span class="s2">&quot;on&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">OFF</span><span class="p">:</span><span class="kt">IconState</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">IconState</span><span class="o">(</span><span class="s2">&quot;off&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">var</span> <span class="n">type</span><span class="p">:</span><span class="kt">String</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">IconState</span><span class="o">(</span><span class="n">type</span><span class="o">:</span><span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">toString</span><span class="o">():</span><span class="kt">String</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This approach leads to three main problems:</p>

<ul>
<li>Depending on when the validation is executed in code, it could still happen that you don&rsquo;t see the problems immediately</li>
<li>We create a lot of code that is only necessary for validation but not for the application itself</li>
<li>We create redundancy because we have to maintain the <code>Vector</code> of expected labels and the enumeration class (<code>IconState</code>). When changing labels it is very likely that you forget to update the Vector.</li>
</ul>


<h2>The Solution</h2>

<p>Thats why we came up with a different approach. We moved the validation into the unit tests. Now the code is separated but still executed because of our integration server (Hudson with <a href="http://www.flexunit.org/" target="_blank">FlexUnit support</a>). The normal application code is now much slimmer and better readable. The artists/developers are automatically notified by mail if their changes break the tests.</p>

<p>To solve point 3 I wrote an assertion method that can reflect on enumeration classes and check all the defined labels on a certain MovieClip.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">assertLabelEnum</span><span class="o">(</span><span class="n">target</span><span class="o">:</span><span class="kt">MovieClip</span><span class="o">,</span> <span class="n">enumClass</span><span class="o">:</span><span class="kt">Class</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">classInfo</span><span class="p">:</span><span class="kt">ClassInfo</span> <span class="o">=</span> <span class="n">ClassInfo</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">enumClass</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">properties</span><span class="p">:</span><span class="kt">Array</span> <span class="o">=</span> <span class="n">classInfo</span><span class="o">.</span><span class="na">getStaticProperties</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">expectedLabel</span> <span class="p">:</span> <span class="kt">String</span><span class="o">;</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">type</span><span class="o">:*;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">labelCounter</span><span class="p">:</span><span class="kt">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="k">each</span> <span class="o">(</span><span class="kd">var</span> <span class="n">property</span> <span class="p">:</span> <span class="kt">Property</span> <span class="k">in</span> <span class="n">properties</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">type</span> <span class="o">=</span> <span class="n">property</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="n">enumClass</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">is</span> <span class="n">String</span><span class="o">)</span>
</span><span class='line'>      <span class="n">expectedLabel</span> <span class="o">=</span> <span class="n">String</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">is</span> <span class="n">enumClass</span><span class="o">)</span>
</span><span class='line'>      <span class="n">type</span><span class="o">[</span><span class="s2">&quot;toString&quot;</span><span class="o">]();</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">labelCounter</span><span class="o">++;</span>
</span><span class='line'>    <span class="n">expectedLabel</span> <span class="o">=</span> <span class="n">type</span><span class="o">[</span><span class="s2">&quot;toString&quot;</span><span class="o">]();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertLabel</span><span class="o">(</span><span class="n">expectedLabel</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="s2">&quot;Amount of expected labels differs from the amount of existing labels&quot;</span><span class="o">,</span> <span class="n">labelCounter</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="na">currentLabels</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method internally calls another assertion method <code>assertLabel()</code>. This method can also be used independently for testing specific labels without using enumeration classes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">assertLabel</span><span class="o">(</span><span class="n">target</span><span class="o">:</span><span class="kt">MovieClip</span><span class="o">,</span> <span class="n">expectedLabel</span><span class="o">:</span><span class="kt">String</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="n">found</span><span class="p">:</span><span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="k">each</span> <span class="o">(</span><span class="kd">var</span> <span class="n">label</span><span class="p">:</span><span class="kt">FrameLabel</span> <span class="k">in</span> <span class="n">target</span><span class="o">.</span><span class="na">currentLabels</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">expectedLabel</span> <span class="o">==</span> <span class="n">label</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">found</span><span class="o">)</span>
</span><span class='line'>    <span class="n">fail</span><span class="o">(</span><span class="s2">&quot;Expected label [&quot;</span> <span class="o">+</span> <span class="n">expectedLabel</span> <span class="o">+</span> <span class="s2">&quot;] not found in &quot;</span> <span class="o">+</span> <span class="n">target</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note:</em> I used the reflection library from spicelib to retrieve all the static members of the enumeration class. You can <a href="http://www.spicefactory.org/parsley/">download the library here</a>.</p>

<p>And this is how the test method would look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="o">[</span><span class="n">Test</span><span class="o">]</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">test_icon_frame_labels</span><span class="o">():</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">assertLabelEnum</span><span class="o">(</span><span class="k">new</span> <span class="kt">IconView</span><span class="o">(),</span> <span class="n">IconState</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We made very good experiences with this approach because unintended changes on the labels no longer lead to awkward behavior in the application itself. And of course the application code can focus on the main logic and is therefor better readable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strong Typed Constants]]></title>
    <link href="http://blog.mattes-groeger.de/strong-typed-constants/"/>
    <updated>2011-01-02T19:19:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/strong-typed-constants</id>
    <content type="html"><![CDATA[<p>Constants are commonly occurring in the ActionScript core classes. Typical examples are events (<code>Event.COMPLETE</code>) or general configurations (<code>StageAlign.TOP_LEFT</code>). These constants are typically of type <code>String</code> and grouped in one class.</p>

<!-- more -->


<p>If you want to set the <code>align</code> property of the <code>Stage</code> for example you have to know where to look up the different possible constants. This can be done by looking up the documentation or by guessing the potential class name (<code>StageAlign</code>). IDEs like <a href="http://fdt.powerflasher.com">FDT</a> provide support for these constants by suggesting them in the auto completion.</p>

<p>However, the programmer is never enforced to use the existing constants and can assign any other string. This is error prone because the string is eventually misspelled. It is also annoying if you have to look up the documentation because your IDE doesn&rsquo;t suggest them. If you use your own constants in an application or library then you are completely on your own.</p>

<p>Other programming languages like Java provide a special syntax for this problem: <code>enum</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Direction</span> <span class="o">{</span><span class="n">LEFT</span><span class="o">,</span> <span class="n">RIGHT</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This enumerations can then be used strong typed in code. For example a function can define this as type in the signature. Assigning something else than one of the predefined constants (<code>LEFT</code> or <code>RIGHT</code>) would cause a compiler error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyDirection</span><span class="o">(</span><span class="n">Direction</span> <span class="n">direction</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// use the enum here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ActionScript language itself has no support for enumerations. But there is a solution: Instead of using constants of type <code>String</code> just use the type of the constants class itself.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">Direction</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">LEFT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">RIGHT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A function can then look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">function </span><span class="nf">applyDirection</span><span class="o">(</span><span class="n">direction</span><span class="o">:</span><span class="kt">Direction</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">direction</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Direction</span><span class="o">.</span><span class="na">LEFT</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// use direction here...</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Direction</span><span class="o">.</span><span class="na">RIGHT</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// use direction here...</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="kt">IllegalOperationError</span><span class="o">(</span><span class="s2">&quot;Unsupported direction &quot;</span> <span class="o">+</span> <span class="n">direction</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">applyDirection</span><span class="o">(</span><span class="n">Direction</span><span class="o">.</span><span class="na">LEFT</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You would still be able to create new instances of <code>Direction</code> and assign them. But the implementation of <code>applyDirection()</code> relies on the predefined constants. An error would be thrown if another instance would be assigned. Furthermore the user can see the different possible constants because he knows which specific type is required.</p>

<p>If you want to trace the <code>Direction</code> or if you want to store more information this is no problem, too:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">Direction</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">LEFT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="s2">&quot;left&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">RIGHT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="s2">&quot;right&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">var</span> <span class="n">direction</span><span class="p">:</span><span class="kt">String</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">Direction</span><span class="o">(</span><span class="n">direction</span><span class="o">:</span><span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">toString</span><span class="o">():</span><span class="kt">String</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right now, this approach is the only way to provide type save enumerations in ActionScript. You should always use them if you write third party libraries. Also in projects with multiple developers this makes sense.</p>

<p><em>Update 2011/03/13:</em> In order to to restrict the enum to the predefined constants you could combine the declaration with a singleton enforcing approach. Just expect an instance of a nested class in the constructor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">package</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="n">Direction</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">LEFT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="k">new</span> <span class="kt">EnumEnforcer</span><span class="o">(),</span> <span class="s2">&quot;left&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">RIGHT</span><span class="p">:</span><span class="kt">Direction</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Direction</span><span class="o">(</span><span class="k">new</span> <span class="kt">EnumEnforcer</span><span class="o">(),</span> <span class="s2">&quot;right&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">var</span> <span class="n">direction</span><span class="p">:</span><span class="kt">String</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">Direction</span><span class="o">(</span><span class="n">enumEnforcer</span><span class="o">:</span><span class="kt">EnumEnforcer</span><span class="o">,</span> <span class="n">direction</span><span class="o">:</span><span class="kt">String</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">toString</span><span class="o">():</span><span class="kt">String</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">direction</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="n">EnumEnforcer</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course this is still not 100% save because you could just pass in <code>null</code>. In this case an error could be thrown. But this would happen at runtime only then.</p>

<p>Thanks to <em>Thijs</em> for pointing out this problem in the comments and <em>Peter Höche</em> for suggesting this solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Logging with Trazzle]]></title>
    <link href="http://blog.mattes-groeger.de/review-logging-with-trazzle/"/>
    <updated>2010-11-14T17:39:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/review-logging-with-trazzle</id>
    <content type="html"><![CDATA[<p>A few weeks ago <a href="https://twitter.com/MattesGroeger/status/24742440693">I discovered</a> an ActionScript 3.0 Logger called Trazzle. It&rsquo;s available for Mac only and provides a well-arranged, beautiful logging output, a performance monitor, bitmap logging <a href="http://www.nesium.com/products/trazzle">and much more</a>. In order to use this logger, you need to install the <a href="http">Logger Client</a> and include the <a href="http://github.com/nesium/trazzlelib-as3/downloads">SWC files</a> within your project.</p>

<!-- more -->


<p><img src="http://blog.mattes-groeger.de/images/posts/trazzle.jpg" title="Trazzle" ></p>

<p>All source files are <a href="http://github.com/nesium/trazzlelib-as3">available on GitHub</a> as well as a <a href="http://github.com/nesium/trazzle-demo-app">simple example</a>.</p>

<h2>Usage</h2>

<p>I assume the author tried to build a logger that is very easy to use. Therefor he provides package level functions which allow fast access to the core features. The logger classes behind can also be used. But this should not be part of this post.</p>

<p>The first step is to initialize to logging framework:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">zz_init</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s2">&quot;Logger app title&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please note:</em> The logging only works if you import the class <code>TrazzleLogger</code>. The reason why the demo application works: the <code>StatusBar</code> class holds a reference to <code>TrazzleLogger</code>. But normal logging will retrieve the reference only dynamically at runtime, so you have to take care of importing it on your own.</p>

<p>After initialization you can trigger the log messages. By default they will be displayed as plain white text. To make use of the different log levels you have to prepend one of the following characters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;normal&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;d debug&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;i info&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;n notice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;w warning&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;e error&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;c critical&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">log</span><span class="o">(</span><span class="s2">&quot;f fatal&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This syntax is one of the main differences to other logging frameworks. Because of this convention it es very fast to use. You don&rsquo;t have to retrieve a logger instance and define a strong typed log level. Unfortunately the drawback is, you have to know the convention and you are responsible to use it correctly as there is no compile time check.</p>

<p>You can also use the classical <code>printf</code> behavior which allows to define a string with placeholders that will be replaced at runtime. Again, in order to use this feature you have to make sure that the method printf is compiled into the application.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="n">logf</span><span class="o">(</span><span class="s2">&quot;There is a difference between %s and %s&quot;</span><span class="o">,</span> <span class="s2">&quot;good&quot;</span><span class="o">,</span> <span class="s2">&quot;evil&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Furthermore with the function <code>zz_inspect(object)</code> you should be able to see all the fields and values of an instance. For some reason I didn&rsquo;t get it to work. Please comment below if you found a solution.</p>

<h2>Filtering</h2>

<p>In contrast to other logging frameworks it is not possible to configure the logging visibility for certain packages and log levels from within the flash client. Instead the configuration will completely take place in the Trazzle application by using the filters window. Here you can define and combine different rules. Excluding specific packages is not possible. You can save each filter set for later usage.</p>

<p><img src="http://blog.mattes-groeger.de/images/posts/trazzleFilters.png" title="Trazzle Filters" ></p>

<h2>Performance Monitor</h2>

<p>The performance monitor gives you a chronological sequence of the memory consumption and the frames per second (fps). It worked for me but I have not really tested it.</p>

<h2>Conclusion</h2>

<p>Using the trazzle logging framework will force you to use the Trazzle application which is available for OS X only. So if you work in larger teams you have to take into consideration that you can not exchange the logging appender easily.</p>

<p>What I think is a bit strange, is that you have to manually import the TrazzleLogger in order to use it via the package level functions. This makes it difficult to enable/disable the logging on different environments like on debug and release stages. Reading traces is also very exhausting because you have to read small grey text on a black background. And if you copy the text into another editor it is broken by the line numbers. The other log messages are better readable (see first image).</p>

<p>Apart from this cons you get an easy to use logger which has useful additional features like bitmap data output. With this feature I was able to easily find a bitmap that accidentally prevented clicks. What I especially like is the StackTrace which you can see for each log entry. Because the logger is very easy and fast to use you can eventually use him for some special cases only.</p>

<p>One final note: To see the line numbers you have to compile with the compiler flag <code>-verbose-stacktraces</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short-Lived Commands with Parsley]]></title>
    <link href="http://blog.mattes-groeger.de/short-lived-commands-with-parsley/"/>
    <updated>2010-10-31T21:24:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/short-lived-commands-with-parsley</id>
    <content type="html"><![CDATA[<p>This week we had to decide on a <a href="http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller">MVC Framework</a> for our next game at <a href="http://www.wooga.com">Wooga</a>. In the end the options were <a href="http://www.robotlegs.org/">Robotlegs</a> and <a href="http://www.spicefactory.org/parsley/">Parsley</a>. Both of them had advantages and disadvantages. One aspect we came across was the support of <code>Short-lived Command Objects</code>.</p>

<!-- more -->


<p>These commands hold no state and will be garbage collected after execution. In Robotlegs they are supported via the <a href="http://api.robotlegs.org/org/robotlegs/core/ICommandMap.html"><code>ICommandMap</code></a> interface. Parsley also provides an implementation of this pattern called <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/messaging.php#command_objects"><code>DynamicCommand</code></a>. In contrast to Robotlegs, Parsley provides 4 different ways to build and configure a context:</p>

<ul>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#mxml">MXML</a>: DynamicCommand Tag. Only for Flex projects.</li>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#xml">XML</a>: DynamicCommand Node. No compiler check on types possible.</li>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#as3">ActionScript</a>: No way to configure dynamic Commands.</li>
<li><a href="http://www.spicefactory.org/parsley/docs/2.3/manual/config.php#dsl">Configuration DSL</a>: Programmatic configuration of Dynamic Commands.</li>
</ul>


<p>Because our game should not use the Flex framework, the last option is our only choice if we want to have strongly typed command mappings like in Robotlegs.</p>

<h2>DynamicCommands via Configuration DSL</h2>

<p>Because a documentation is not available for this case it was a bit tricky to find the solution (thanks for the hint, Jens). This was the first result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">var</span> <span class="n">contextBuilder</span><span class="p">:</span><span class="kt">ContextBuilder</span> <span class="o">=</span> <span class="n">ContextBuilder</span><span class="o">.</span><span class="na">newSetup</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">viewRoot</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">targetDef</span><span class="p">:</span><span class="kt">DynamicObjectDefinition</span> <span class="o">=</span> <span class="n">contextBuilder</span>
</span><span class='line'>  <span class="o">.</span><span class="na">objectDefinition</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">CommandType</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">asDynamicObject</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">DynamicCommandBuilder</span>
</span><span class='line'>  <span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="n">targetDef</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">builder</span>
</span><span class='line'>  <span class="o">.</span><span class="na">messageType</span><span class="o">(</span><span class="n">MessageType</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">stateful</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">config</span><span class="o">(</span><span class="n">ActionScriptConfig</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">MainConfig</span><span class="o">));</span>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can not use the <code>ActionScriptContexBuilder.build()</code> notation anymore. Instead you have to configure the whole context via the DSL. In line 18, the actual configuration (<code>MainConfig</code>) which contains all object definitions is passed in.</p>

<p>Because this configuration is very hard to read and redundant if you want to map several Commands, I encapsulated the mapping to a separate class <code>CommandMap</code>. Now the configuration looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">var</span> <span class="n">contextBuilder</span><span class="p">:</span><span class="kt">ContextBuilder</span> <span class="o">=</span> <span class="n">ContextBuilder</span><span class="o">.</span><span class="na">newSetup</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">viewRoot</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">commandMap</span><span class="p">:</span><span class="kt">CommandMap</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CommandMap</span><span class="o">(</span><span class="n">contextBuilder</span><span class="o">);</span>
</span><span class='line'><span class="n">commandMap</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">LoginCommand</span><span class="o">,</span> <span class="n">LoginRequest</span><span class="o">);</span>
</span><span class='line'><span class="n">commandMap</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">LogoutCommand</span><span class="o">,</span> <span class="n">LogoutRequest</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">config</span><span class="o">(</span><span class="n">ActionScriptConfig</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">MainConfig</span><span class="o">));</span>
</span><span class='line'><span class="n">contextBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Until now I found no way to map or un-map Commands after the context has been built. The only way would be to destroy the context they are registered in.</p>

<p>To get a better impression how short-lived commands are used in Parsley, I implemented a small example, which you can <a href="http://github.com/MattesGroeger/as3-parsley-example">access on GitHub</a>. The CommandMap class can be <a href="http://github.com/MattesGroeger/as3-parsley-example/blob/master/src/de/mattesgroeger/parsley/core/CommandMap.as">found here</a>.</p>

<p>And this is how the login example looks like. Invalid credentials lead to an error pop up. Valid login works with <em>admin</em> and password <em>test</em>:</p>

<object style="width: 850px; height: 250px;" width="850" height="250" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="/images/posts/ParsleyExample1.swf" /><embed style="width: 850px; height: 250px;" width="850" height="250" type="application/x-shockwave-flash" src="http://blog.mattes-groeger.de/images/posts/ParsleyExample1.swf" /> </object>


<h2>Summary</h2>

<p>The Robotlegs implementation is very straight forward. Commands can be mapped and un-mapped at any time. This is not possible in Parsley. But you have other features that give maybe similar results (for example <a href="http://www.spicefactory.org/parsley/docs/2.3/manual/messaging.php#interceptors" target="_blank">MessageInterceptors</a>).</p>

<p>Because Parsley reflects on the types you can pass data directly to the execute method. This way, each concrete execute method can receive strong typed parameters (see line 9). No framework class has to be extended for custom Commands. This is how a command can look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">LogoutCommand</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="o">[</span><span class="n">Inject</span><span class="o">]</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">var</span> <span class="n">service</span><span class="p">:</span><span class="kt">ISessionService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="n">MessageDispatcher</span><span class="o">]</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">var</span> <span class="n">dispatcher</span><span class="p">:</span><span class="kt">Function</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">execute</span><span class="o">(</span><span class="n">message</span><span class="o">:</span><span class="kt">LogoutRequest</span><span class="o">)</span> <span class="o">:</span> <span class="kt">ServiceRequest</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">logout</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">sessionId</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">result</span><span class="o">(</span><span class="n">success</span><span class="o">:</span><span class="kt">Boolean</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">dispatcher</span><span class="o">(</span><span class="k">new</span> <span class="kt">LogoutSuccess</span><span class="o">(</span><span class="n">success</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also like the native support of synchronous and asynchronous Commands in Parsley. No special configuration is necessary, because Parsley reflects on the return type of the <code>execute()</code> method (line 9, <code>ServiceRequest</code>).</p>

<h2>Links:</h2>

<ul>
<li><a href="http://github.com/MattesGroeger/as3-parsley-example">Browse the example sources on GitHub</a></li>
<li><a href="http://github.com/MattesGroeger/as3-parsley-example/blob/master/README.md">Readme of the example</a></li>
<li><a href="http://github.com/MattesGroeger/as3-parsley-example/blob/master/src/de/mattesgroeger/parsley/core/CommandMap.as">CommandMap source</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Icon Badge for Windows]]></title>
    <link href="http://blog.mattes-groeger.de/icon-badge-for-windows/"/>
    <updated>2010-03-14T22:54:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/icon-badge-for-windows</id>
    <content type="html"><![CDATA[<p>Until now the <a href="http://blog.mattes-groeger.de/icon-badge-library-for-air/">Air Icon Badge library</a> implementation only supported OS X dock icons. Nevertheless it is easy to extend the implementation for utilizing it as Windows system tray icon. In this article I will demonstrate how this could be realized.</p>

<!-- more -->


<p><img class="center" src="http://blog.mattes-groeger.de/images/posts/WindowsSystemTray.jpg"></p>

<h2>Demo</h2>

<p>I extended the existing example implementation. Just choose &ldquo;Window Tray Icon&rdquo; from the right panel for previewing the new icon.</p>

<object style="width: 850px; height: 350px;" width="850" height="350" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="/images/posts/WebBadgeExample.swf" /><embed style="width: 850px; height: 350px;" width="850" height="350" type="application/x-shockwave-flash" src="http://blog.mattes-groeger.de/images/posts/WebBadgeExample.swf" /></object>


<p></br></p>

<h2>Implementation</h2>

<p>The first class that I create is the <code>SystemTrayIconBuilder</code> (it must implement <code>IconBuilder</code> interface). This class is responsible for composing the system tray icon. It also sets the general icon size to 16 by 16 pixels.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">SystemTrayIconBuilder</span> <span class="kd">extends</span> <span class="n">AbstractIconBuilder</span> <span class="kd">implements</span> <span class="n">IconBuilder</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">createNewIcon</span><span class="o">(</span><span class="n">width</span> <span class="o">:</span> <span class="kt">int</span><span class="o">,</span> <span class="n">height</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">createNewIcon</span><span class="o">(</span><span class="mi">16</span><span class="o">,</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">addBackground</span><span class="o">(</span> <span class="n">background</span> <span class="o">:</span> <span class="kt">Bitmap</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">background</span><span class="o">.</span><span class="na">width</span> <span class="o">=</span> <span class="n">background</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">container</span><span class="o">.</span><span class="na">addChild</span><span class="o">(</span><span class="n">background</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">addBadge</span><span class="o">(</span><span class="n">label</span> <span class="o">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="n">badge</span> <span class="p">:</span> <span class="kt">TrayIconBadge</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">TrayIconBadge</span><span class="o">();</span>
</span><span class='line'>    <span class="n">badge</span><span class="o">.</span><span class="na">label</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">label</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">container</span><span class="o">.</span><span class="na">addChild</span><span class="o">(</span><span class="n">badge</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note the the <code>TrayIconBadge</code> class used in this example (line 17) is a MovieClip designed and exported (swc) with the Flash IDE. I used a pixel font for better readability. Because of the small icon size the visible letter count is also limited.</p>

<p>The next step is to create a custom <code>SystemTrayIconBadge</code> which has to implement the <code>IconBadge</code> interface. To avoid redundancies I extend the <code>DockIconBadge</code> class and override the factory method &ldquo;<code>createIconBuilder()</code>&rdquo;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">SystemTrayIconBadge</span> <span class="kd">extends</span> <span class="n">DockIconBadge</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">createIconBuilder</span><span class="o">()</span> <span class="o">:</span> <span class="kt">IconBuilder</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="kt">SystemTrayIconBuilder</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last step is to build the <code>CrossPlatformIconBadgeFactory</code> which implements <code>IconBadgeFactory</code>. It is responsible for detecting the users operating system and returning the corresponding <code>IconBadge</code>. Again I extend the existing factory class to avoid redundancies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="n">CrossPlatformIconBadgeFactory</span> <span class="kd">extends</span>
</span><span class='line'><span class="n">AirIconBadgeFactroy</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function </span><span class="nf">create</span><span class="o">()</span> <span class="o">:</span> <span class="kt">IconBadge</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">NativeApplication</span><span class="o">.</span><span class="na">supportsSystemTrayIcon</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="kt">SystemTrayIconBadge</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally for using the new factory it has to be assigned to the <code>AirIconBadge</code> class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CrossPlatformIconBadgeFactory</span><span class="o">();</span>
</span><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">label</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>As you can see, it is very little effort to add the windows system tray icon capability. You are free to (re)use this example. <a href="http://code.google.com/p/air-icon-badge/downloads/list">Binaries</a> and <a href="http://code.google.com/p/air-icon-badge/source/browse/#svn/air-icon-badge-examples/trunk/dev/src/de/mgroeger/air/icon/example/windows">sources</a> can be downloaded from the <a href="http://code.google.com/p/air-icon-badge/">google code project site</a>.</p>

<ul>
<li><a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-examples.zip&amp;amp;can=2&amp;amp;q=#makechanges">Example Download</a> (air/swf)</li>
<li><a href="http://code.google.com/p/air-icon-badge/source/browse/#svn/air-icon-badge-examples/trunk/dev/src/">Browse Example Sources</a></li>
<li><a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-0.1.zip">Library Download</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Icon Badge Library for Air]]></title>
    <link href="http://blog.mattes-groeger.de/icon-badge-library-for-air/"/>
    <updated>2010-02-08T14:06:00+01:00</updated>
    <id>http://blog.mattes-groeger.de/icon-badge-library-for-air</id>
    <content type="html"><![CDATA[<p><a href="http://www.adobe.com/products/air/">Adobe Air</a> is often used to build feed readers or social media clients. This kind of applications can retrieve new data while they are running in the background. In that case it would be great to inform the user about the amount of new items.</p>

<!-- more -->


<p><img class="right" src="http://blog.mattes-groeger.de/images/posts/mail.png"></p>

<p>With OS X you can use the dock icon for that purpose. The Cocoa Framework allows to display a user defined text consistently on top of the application dock tile (icon). E.g. the screenshot at the right shows 2 unread mails in the inbox.</p>

<p><img class="left" src="http://blog.mattes-groeger.de/images/posts/comparision.png" title="Native and emulated badge" ></p>

<p>Unfortunately the Air runtime allows no access to this native functionality. Thats why the idea for this library came up. It tries to emulate the native badge with the possibilities Air provides (see left image). Until now only the OS X badge is supported but a Windows implementation is possible, too. I will demonstrate the extensibility in one of the following blog posts.</p>

<h2>Usage</h2>

<p>To show the badge label you can use the static facade <code>AirIconBadge</code>. Internally it will create an <code>IconBadge</code> appropriate for the current operating system. <strong>Note:</strong> only one implementation for OS X is provided until now! Windows or Linux users won&rsquo;t see a badge label.</p>

<p>With the static property <code>label</code> you can assign any string that should be displayed. Thats it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">label</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you assign an empty string or <code>null</code>, no badge will be displayed. To remove the current badge label you can also call the method <code>clearLabel()</code>.</p>

<p>By default the biggest icon defined within the <a href="http://livedocs.adobe.com/flex/3/html/help.html?content=File_formats_1.html">application descriptor</a> will be loaded and shown. If no icon has been defined or the path is incorrect you must assign a <code>customIcon</code> in order to see the label. You can also assign a <code>customIcon</code> if you want to replace the default icon temporarily. Removing the <code>customIcon</code> will show up the default icon again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">customIcon</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CustomIconBitmap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If neither of the icons could be loaded, no badge will be displayed. In this case an error event will be dispatched (<code>UpdateErrorEvent</code>). To get status information about the internals you can register for the InformationEvent. Both events will be dispatched by the <code>IconBadge</code> witch is statically stored within the AirIconBadge.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">AirIconBadge</span><span class="o">.</span><span class="na">customIcon</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">CustomIconBitmap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">iconBadge</span> <span class="p">:</span> <span class="kt">IconBadge</span> <span class="o">=</span> <span class="n">AirIconBadge</span><span class="o">.</span><span class="na">iconBadge</span><span class="o">;</span>
</span><span class='line'><span class="n">iconBadge</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">UpdateErrorEvent</span><span class="o">.</span><span class="na">UPDATE_ERROR</span><span class="o">,</span> <span class="n">handleError</span><span class="o">);</span>
</span><span class='line'><span class="n">iconBadge</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">InformationEvent</span><span class="o">.</span><span class="na">INFORMATION</span><span class="o">,</span> <span class="n">handleInformation</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function </span><span class="nf">handleError</span><span class="o">(</span><span class="n">event</span> <span class="o">:</span> <span class="kt">UpdateErrorEvent</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">// do some error handling</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function </span><span class="nf">handleInformation</span><span class="o">(</span><span class="n">event</span> <span class="o">:</span> <span class="kt">InformationEvent</span><span class="o">)</span> <span class="o">:</span> <span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nf">trace</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">information</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Download &amp; Demo</h2>

<p>All sources, binaries and examples are <a href="http://code.google.com/p/air-icon-badge/downloads/list">available for download</a> under the MIT license. If you have a Mac, you can <a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-examples.zip&amp;amp;can=2&amp;amp;q=#makechanges">download this Air application</a> where the badge shows up on the real application icon. Running this application on windows will have no visual effect.</p>

<p>None Mac users can use the following demo that shows a preview of the dock icon:</p>

<object style="width: 850px; height: 400px;" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="850" height="400" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="/images/posts/WebBadgeExample.swf" /><embed style="width: 850px; height: 400px;" type="application/x-shockwave-flash" width="850" height="400" src="http://blog.mattes-groeger.de/images/posts/WebBadgeExample.swf"> </embed></object>


<p></br></p>

<h2>Whats next</h2>

<p>The documentation (especially the ASDocs) will be improved as well as the sources. If you have questions or feature requests, please let my know. The next blog posts will give you a deeper insight in the architecture and extensibility of this library.</p>
]]></content>
  </entry>
  
</feed>
