<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Api | Mattes Groeger]]></title>
  <link href="http://MattesGroeger.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://MattesGroeger.github.io/"/>
  <updated>2013-11-14T23:40:51+01:00</updated>
  <id>http://MattesGroeger.github.io/</id>
  <author>
    <name><![CDATA[Mattes Groeger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Icon Badge for Windows]]></title>
    <link href="http://MattesGroeger.github.io/blog/2010/03/14/icon-badge-for-windows/"/>
    <updated>2010-03-14T22:54:00+01:00</updated>
    <id>http://MattesGroeger.github.io/blog/2010/03/14/icon-badge-for-windows</id>
    <content type="html"><![CDATA[<p>Until now the <a href="/blog/2010/02/08/icon-badge-library-for-air/">Air Icon Badge library</a> implementation only supported OS X dock icons. Nevertheless it is easy to extend the implementation for utilizing it as Windows system tray icon. In this article I will demonstrate how this could be realized.</p>

<!-- more -->


<p>{% img center /images/posts/WindowsSystemTray.jpg %}</p>

<h2>Demo</h2>

<p>I extended the existing example implementation. Just choose &ldquo;Window Tray Icon&rdquo; from the right panel for previewing the new icon.</p>

<object style="width: 850px; height: 350px;" width="850" height="350" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="/images/posts/WebBadgeExample.swf" /><embed style="width: 850px; height: 350px;" width="850" height="350" type="application/x-shockwave-flash" src="http://MattesGroeger.github.io/images/posts/WebBadgeExample.swf" /></object>


<p></br></p>

<h2>Implementation</h2>

<p>The first class that I create is the <code>SystemTrayIconBuilder</code> (it must implement <code>IconBuilder</code> interface). This class is responsible for composing the system tray icon. It also sets the general icon size to 16 by 16 pixels.</p>

<p>{% codeblock lang:as3 %}
public class SystemTrayIconBuilder extends AbstractIconBuilder implements IconBuilder
{
  public override function createNewIcon(width : int, height : int) : void
  {</p>

<pre><code>super.createNewIcon(16, 16);
</code></pre>

<p>  }</p>

<p>  public override function addBackground( background : Bitmap) : void
  {</p>

<pre><code>background.width = background.height = 16;

container.addChild(background);
</code></pre>

<p>  }</p>

<p>  public override function addBadge(label : String) : void
  {</p>

<pre><code>var badge : TrayIconBadge = new TrayIconBadge();
badge.label.text = label;

container.addChild(badge);
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>Please note the the <code>TrayIconBadge</code> class used in this example (line 17) is a MovieClip designed and exported (swc) with the Flash IDE. I used a pixel font for better readability. Because of the small icon size the visible letter count is also limited.</p>

<p>The next step is to create a custom <code>SystemTrayIconBadge</code> which has to implement the <code>IconBadge</code> interface. To avoid redundancies I extend the <code>DockIconBadge</code> class and override the factory method &ldquo;<code>createIconBuilder()</code>&rdquo;.</p>

<p>{% codeblock lang:as3 %}
public class SystemTrayIconBadge extends DockIconBadge
{
  protected override function createIconBuilder() : IconBuilder
  {</p>

<pre><code>return new SystemTrayIconBuilder();
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>The last step is to build the <code>CrossPlatformIconBadgeFactory</code> which implements <code>IconBadgeFactory</code>. It is responsible for detecting the users operating system and returning the corresponding <code>IconBadge</code>. Again I extend the existing factory class to avoid redundancies:</p>

<p>{% codeblock lang:as3 %}
public class CrossPlatformIconBadgeFactory extends
AirIconBadgeFactroy
{
  public override function create() : IconBadge
  {</p>

<pre><code>if (NativeApplication.supportsSystemTrayIcon)
  return new SystemTrayIconBadge();

  return super.create();
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>Finally for using the new factory it has to be assigned to the <code>AirIconBadge</code> class.</p>

<p>{% codeblock lang:as3 %}
AirIconBadge.factory = new CrossPlatformIconBadgeFactory();
AirIconBadge.label = &ldquo;1&rdquo;;
{% endcodeblock %}</p>

<h2>Summary</h2>

<p>As you can see, it is very little effort to add the windows system tray icon capability. You are free to (re)use this example. <a href="http://code.google.com/p/air-icon-badge/downloads/list">Binaries</a> and <a href="http://code.google.com/p/air-icon-badge/source/browse/#svn/air-icon-badge-examples/trunk/dev/src/de/mgroeger/air/icon/example/windows">sources</a> can be downloaded from the <a href="http://code.google.com/p/air-icon-badge/">google code project site</a>.</p>

<ul>
<li><a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-examples.zip&amp;amp;can=2&amp;amp;q=#makechanges">Example Download</a> (air/swf)</li>
<li><a href="http://code.google.com/p/air-icon-badge/source/browse/#svn/air-icon-badge-examples/trunk/dev/src/">Browse Example Sources</a></li>
<li><a href="http://code.google.com/p/air-icon-badge/downloads/detail?name=air-icon-badge-0.1.zip">Library Download</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
