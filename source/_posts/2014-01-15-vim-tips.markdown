---
layout: post
title: "My Favourite Vim Plugins"
date: 2014-01-15 00:12
comments: true
categories: vim, tip
---

I use [vim](http://www.vim.org/) for a long time already but always had a hard time to be efficient with it. During the last month I learned a lot from my new coworkers. In this article I want to share vim plugins that helped me to become really productive. I use them all on a daily basis.

<!-- more -->

## Manage Vim Plugins

{% img right /images/posts/vim-vundle.png %}

Vim gets powerful due to the great plugins people create. I recommend using a plugin manager like [Pathogen](http://www.vim.org/scripts/script.php?script_id=2332) or [Vundle](https://github.com/gmarik/Vundle.vim). I prefer [Vundle](https://github.com/gmarik/Vundle.vim) as it allows to add new plugins by adding one line to the `.vimrc` and running `:BundleInstall`. In the following sections I show the Vundle install command for each plugin.

## Jump to Declaration (ctags)

By default vim doesn't know anything about the semantics of your code. But with [exuberant ctags](http://ctags.sourceforge.net/) you can generate a `tags` file that contains jump marks for your whole source code. It supports 41 programming languages. This way you can jump to a method declaration using the `Ctrl + ]` shortcut (`Ctrl + T` to go back). A detailed description on how to setup `ctags` can be found over at [Andrew Stewarts Blog](http://blog.stwrt.ca/2012/10/31/vim-ctags).

## Show Outline (Tagbar)

{% img right /images/posts/vim-tagbar.png %}

The [Tagbar plugin](http://majutsushi.github.io/tagbar/) utilizes the aforementioned `tags` to show an outline of the current source file. You can then quickly jump to the desired method or class declaration. This way navigation in big files gets much easier.

{% codeblock lang:vim .vimrc %}
Bundle 'majutsushi/tagbar'                           " Add Tagbar plugin with vundle

nmap <F8> :TagbarToggle<CR>                          " Toggle the outline with F8
let g:tagbar_width = 30                              " Make buffer more narrow
let g:tagbar_autoclose = 1                           " Automatically close after select
let g:tagbar_autofocus = 1                           " Move focus into when opening
let g:tagbar_sort = 0                                " Same order as in file
let g:tagbar_compact = 1                             " Hide help text
let g:tagbar_indent = 1                              " Smaller intendation
let g:tagbar_foldlevel = 2                           " Collapse lower levels
{% endcodeblock %}

## Tab-Autocompletion (Supertab)

{% img right /images/posts/vim-supertab.png %}

Vim [supports auto-completion](http://vimdoc.sourceforge.net/htmldoc/options.html#'completeopt') by default. It is based on all opened buffers, ctags and included files. But the default shortcuts are a bit cumbersome (`Ctrl + N`/`Ctrl + P`).

The [Supertab plugin](https://github.com/ervandew/supertab) utilizes the `Tab` and `Shift+Tab` keys to trigger and navigate the autocompletion popup. It also allows to automatically switch to the smarter context-aware [omni completion](http://vim.wikia.com/wiki/Omni_completion):

{% codeblock lang:vim .vimrc %}
Bundle 'ervandew/supertab'                           " Add Supertab plugin with vundle

set completeopt=longest,menu                         " No popup when only 1 option

highlight Pmenu ctermfg=25 ctermbg=195               " Improved colors for completion popup
highlight PmenuSel ctermfg=195 ctermbg=25            " Might be not neccessary for your theme

let g:SuperTabDefaultCompletionType = "context"      " Auto-switch to omni completion
let g:SuperTabContextDefaultCompletionType = "<c-n>" " Navigate from top to bottom
let g:SuperTabMappingTabLiteral = "<c-v>"            " Enforce tab with Ctrl + v (e.g. after words)
let g:SuperTabLongestHighlight = 1                   " Select first suggestion
{% endcodeblock %}

## Navigate Project Structure (Nerdtree)

{% img right /images/posts/vim-nerdtree.png %}

Vim has a pretty good [built-in file explorer](http://vimdoc.sourceforge.net/htmldoc/pi_netrw.html#:Explore). However, the [NERD tree plugin](https://github.com/scrooloose/nerdtree) makes the usage easier by providing sane default configurations. Also the UI is a bit more clean.

Please note that NERD tree also allows to show the currently opened buffer in the file structure (configured as `F3` shortcut below):

{% codeblock lang:vim .vimrc %}
Bundle 'scrooloose/nerdtree'                         " Add NERD tree plugin with vundle

nnoremap <F2> :NERDTreeToggle<CR>                    " Toggle NERD tree with F2
nnoremap <F3> :NERDTreeFind<CR>                      " Show current file in NERD tree with F3

let NERDTreeIgnore = ['\.meta$']                     " Ignore *.meta files in NERD tree
let NERDTreeMinimalUI = 1                            " Remove help and bookmark text
let NERDTreeAutoDeleteBuffer = 1                     " Don't ask for buffer removal
{% endcodeblock %}

## Find Files by Name (CtrlP)

{% img right /images/posts/vim-ctrlp.png %}

The [CtrlP plugin](https://github.com/kien/ctrlp.vim) allows to quickly search for files in the project. It uses a `fuzzy` logic that allows to enter only parts of the path or file. Trigger the plugin with `Ctrl + P` and type the path or file name you are searching for.

If you are searching only for a file name you can switch to the file mode inside the CtrlP buffer using `Ctrl + D`. In order to enter a regular expression press `Ctrl + R`.

{% codeblock lang:vim .vimrc %}
Bundle 'kien/ctrlp.vim'                           " Add CtrlP plugin with vundle

set wildignore+=*/.git/*,*/.hg/*,*/.svn/*         " Default vcs ignores
set wildignore+=*/ebin/*,*.beam                   " Erlang ignores
{% endcodeblock %}

## Content Search (Ack)

{% img right /images/posts/vim-ack.png %}

When it comes to searching within files I can recommend the [Ack plugin](https://github.com/mileszs/ack.vim). [Ack](http://beyondgrep.com/) is the better alternative over [grep](http://en.wikipedia.org/wiki/Grep) for searching. The plugin shows the results in a quickfix window.

Make sure to [install Ack](https://github.com/mileszs/ack.vim) before using the plugin. On OSX use homebrew: `brew install ack`. Then in vim you can type `:Ack searchterm` to start the search. A nice trick is to mark a term with `Shift + 8` and then type `:Ack`. This will directly search for the term without having to re-type it.

{% codeblock lang:vim .vimrc %}
Bundle 'mileszs/ack.vim'                          " Add Ack plugin with vundle
{% endcodeblock %}

## Syntax Check (Syntastic)

{% img right /images/posts/vim-syntastic.png %}

The [Syntastic plugin](https://github.com/scrooloose/syntastic) runs your files through external syntax checkers. If syntax errors are detected, they will show up right inside your code without having to compile it. Syntastic supports a [great amount of languages](https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers).

{% codeblock lang:vim .vimrc %}
Bundle 'scrooloose/syntastic'                     " Add Syntastic plugin with vundle
{% endcodeblock %}

## Toggle Comments (TComment)

{% img right /images/posts/vim-tcomment.png %}

TComment is a great little plugin that allows you to toggle comments in your source code. It is smart enough to determine the proper comment notation based on the file type. It supports block comments (Visual selection + `gc` keystroke)  as well as line comments (`gcc` keystroke).

{% codeblock lang:vim .vimrc %}
Bundle 'tomtom/tcomment_vim'                      " Add TComment plugin with vundle
{% endcodeblock %}

## Reopen Closed Buffers (BufExplorer)

{% img right /images/posts/vim-bufexplorer.png %}

It happens quite often to me that I open files in existing buffers. When I want to go back to the previous files later I have to remember which buffer they were in or reopen them by name.

[BufExplorer](https://github.com/jlanzarotta/bufexplorer) is a great plugin that helps in that situation. It shows all (previously) opened buffers (files) as a list that you can choose from. When working on many different files this is really helpful.

{% codeblock lang:vim .vimrc %}
Bundle 'jlanzarotta/bufexplorer'                  " Add BufExplorer plugin with vundle

let g:bufExplorerShowRelativePath = 1             " Shorter file path
let g:bufExplorerDefaultHelp = 0                  " Remove the help text
{% endcodeblock %}

## Maximize Current Buffer (ZoomWindow)

Bundle 'regedarek/ZoomWin'

* When working with multiple panes focus on one
* Toggles back to previous layout
* Use specific version for performance reasons!

## Show Git Changes (GitGutter)

{% img center /images/posts/vim-gitgutter.png %}

* See git changes (add/rm/change) per line

{% codeblock lang:vim .vimrc %}
Bundle 'airblade/vim-gitgutter'                   " Add GitGutter plugin with vundle
{% endcodeblock %}

## Conclusion

Check out my config on GitHub.
